"""
字典是另一种可变容器模型，且可存储任意类型对象。
字典的每个键值 key=>value 对用冒号 : 分割，每个对之间用逗号(,)分割，整个字典包括在花括号 {} 中
"""
a = {
    'name': 'noah',
    'yea': 18,
    'gender': 'girl'
}

print(a['name'])
"""
内置函数
    len()计算键的总数
    str()输出字典，可以打印字符串表
    type()查看类型
"""

"""
其他方法
    dict.clear() 清空字典内所有元素

    dict.copy() 字典浅复制
//复制概念
//    在Python中,复制(或拷贝)列表是一个常见的操作。有时候,我们需要创建一个新的列表,该列表包含原始列表中相同的元素。
        Python提供了多种复制列表的方法,包括浅复制和深复制。

//浅复制(Shallow Copy):
//浅复制创建一个新的列表对象，但该列表中的元素是原始列表中元素的引用。换句话说，浅复制仅复制了原始列表中元素的引用，而不是创建副本。
//使用copy()方法或切片操作符[:]可以进行浅复制。
//修改原始列表的元素会反映在浅复制的列表中，因为它们引用相同的对象。
//示例：
//original_list = [1, 2, 3, 4, 5]
//shallow_copy = original_list.copy()  # 使用copy()方法进行浅复制
//# 或者 shallow_copy = original_list[:]
//original_list[0] = 10  # 修改原始列表的第一个元素
//print(original_list)    # 输出：[10, 2, 3, 4, 5]
//print(shallow_copy)     # 输出：[1, 2, 3, 4, 5]

//深复制(Deep Copy):
//深复制创建一个完全独立的新列表，包括其中的元素。它会递归复制原始列表及其所有嵌套对象，确保创建的副本与原始列表完全独立，互不影响。
//使用deepcopy()方法从copy模块进行深复制。
//修改原始列表的元素不会影响深复制的列表。
//示例：
//import copy
//
//original_list = [1, 2, [3, 4]]
//deep_copy = copy.deepcopy(original_list)  # 使用deepcopy()方法进行深复制
//original_list[2][0] = 10  # 修改原始列表的第一个嵌套列表的第一个元素
//print(original_list)     # 输出：[1, 2, [10, 4]]
//print(deep_copy)          # 输出：[1, 2, [3, 4]]
//浅复制和深复制适用于不同的场景。根据需求选择适当的方法来复制列表以满足您的需求。
//如果列表中包含嵌套对象，并且您希望创建一个完全独立的副本，以免修改原始列表时受到影响，则应使用深复制。
//如果仅需要一个引用原始列表的新列表，或者原始列表不包含嵌套对象，则可以使用浅复制

    dict.fromkeys(key, value) 创建新字典,以序列seq中元素做字典的键,val为字典所有键对应的初始值

    dict.get(key, defalut='none') 用于获取字典中指定键的值。如果键存在于字典中，则返回对应的值；如果键不存在，则返回默认值

    key in dict 如果该key在字典中返回True,否则返回False

    dict.items() 是一个字典方法，用于返回一个包含字典中所有键值对的可迭代对象。
    该方法返回的可迭代对象中，每个元素都是一个由键和对应值组成的元组。

    dict.keys() 用于返回一个包含字典中所有键的可迭代对象。
    该方法返回的可迭代对象中，每个元素都是字典中的一个键

    dict.setdefault(key, default='none') 和get()类似, 但如果键不存在于字典中,
    将会添加键并将值设为default

    dict.update(dict2) 把字典dict2的键/值对更新到dict里

    dict.values() 用于返回一个包含字典中所有值的可迭代对象。该方法返回的可迭代对象中，每个元素都是字典中的一个值

    dict.pop(key, default) 删除键,并返回键的值, 如果该key不存在,则返回default

    popitem() 返回并删除字典中的最后一对键和值。
"""
